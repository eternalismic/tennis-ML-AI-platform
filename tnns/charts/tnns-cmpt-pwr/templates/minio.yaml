{{- if .Values.minio.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata: { name: minio }
spec:
  replicas: 1
  selector: { matchLabels: { app: minio } }
  template:
    metadata: { labels: { app: minio } }
    spec:
      containers:
        - name: minio
          image: {{ .Values.minio.image | quote }}
          args: ["server","/data","--console-address",":{{ .Values.minio.service.consolePort }}"]
          ports:
            - { containerPort: {{ .Values.minio.service.apiPort }} }
            - { containerPort: {{ .Values.minio.service.consolePort }} }
          env:
            - name: MINIO_ROOT_USER
              valueFrom: { secretKeyRef: { name: {{ .Values.minio.accessKeySecret | quote }}, key: accessKey } }
            - name: MINIO_ROOT_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Values.minio.secretKeySecret | quote }}, key: secretKey } }
          volumeMounts:
            - { name: data, mountPath: /data }
      volumes:
        - name: data
{{- if .Values.minio.persistence.enabled }}
          persistentVolumeClaim:
            claimName: minio-data
{{- else }}
          emptyDir: {}
{{- end }}
---
{{- if .Values.minio.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata: { name: minio-data }
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: {{ .Values.minio.persistence.size | quote }}
  storageClassName: {{ if .Values.minio.persistence.storageClass }}{{ .Values.minio.persistence.storageClass | quote }}{{ else }}null{{ end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata: { name: minio }
spec:
  selector: { app: minio }
  ports:
    - { name: api, port: {{ .Values.minio.service.apiPort }}, targetPort: {{ .Values.minio.service.apiPort }} }
    - { name: console, port: {{ .Values.minio.service.consolePort }}, targetPort: {{ .Values.minio.service.consolePort }} }
{{- if and .Values.routes.enabled .Values.minio.routeHostConsole }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata: { name: minio-console }
spec:
  host: {{ .Values.minio.routeHostConsole }}
  to: { kind: Service, name: minio }
  port: { targetPort: console }
  tls: { termination: edge, insecureEdgeTerminationPolicy: Redirect }
{{- end }}
{{- if and .Values.routes.enabled .Values.minio.routeHostApi }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata: { name: minio-api }
spec:
  host: {{ .Values.minio.routeHostApi }}
  to: { kind: Service, name: minio }
  port: { targetPort: api }
  tls: { termination: edge, insecureEdgeTerminationPolicy: Redirect }
{{- end }}
{{- end }}
