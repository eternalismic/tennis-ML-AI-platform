version: "3.9"
services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports: ["2181:2181"]
  kafka:
    image: bitnami/kafka:3.7
    depends_on: [zookeeper]
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports: ["9092:9092"]

  db:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: postgres
    ports: ["5432:5432"]
    volumes:
      - ./etc/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports: ["9000:9000","9001:9001"]
    volumes:
      - minio-data:/data

  minio-init:
    image: minio/mc:latest
    depends_on: [minio]
    entrypoint: >
      /bin/sh -c "
      until (mc alias set local http://minio:9000 minioadmin minioadmin); do sleep 1; done &&
      mc mb -p local/mlflow || true &&
      mc anonymous set download local/mlflow
      "

  mlflow:
    image: bitnami/mlflow:2
    depends_on: [db, minio]
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@db:5432/mlflow
      - MLFLOW_ARTIFACTS_DESTINATION=s3://mlflow
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_HTTP_PORT=5000
    ports: ["5000:5000"]

  prediction-api:
    build: ./services/prediction-api
    environment:
      - PORT=8000
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_MODEL_NAME=tennis_win_predictor
      - MLFLOW_MODEL_STAGE=Production
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    depends_on: [db, mlflow, minio]
    ports: ["8000:8000"]

  mcp-agent:
    build: ./services/mcp-agent
    depends_on: [kafka]
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - ODDS_TOPIC=odds
      - PRED_TOPIC=predictions
      - MCP_EDGE=0.03
    restart: unless-stopped

  odds-ingestion:
    build: ./services/odds-ingestion
    depends_on: [kafka]
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - ODDS_TOPIC=odds
      - ODDS_PROVIDER=MOCK
    restart: unless-stopped

  betting-execution:
    build: ./services/betting-execution
    depends_on: [kafka]
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - PRED_TOPIC=predictions
      - EDGE_THRESHOLD=0.05
      - EXECUTION_MODE=SIM
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:10.4.3
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports: ["3000:3000"]
    volumes:
      - ./etc/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro

  airflow:
    image: apache/airflow:2.8.3
    command: ["bash","-lc","airflow standalone"]
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    ports: ["8080:8080"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags:ro

volumes:
  minio-data:
